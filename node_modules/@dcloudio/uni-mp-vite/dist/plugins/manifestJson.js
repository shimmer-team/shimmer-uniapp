"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uniManifestJsonPlugin = void 0;
const path_1 = __importDefault(require("path"));
const shared_1 = require("@vue/shared");
const uni_cli_shared_1 = require("@dcloudio/uni-cli-shared");
function uniManifestJsonPlugin(options) {
    let projectJson;
    return (0, uni_cli_shared_1.defineUniManifestJsonPlugin)((opts) => {
        return {
            name: 'uni:mp-manifest-json',
            enforce: 'pre',
            transform(code, id) {
                if (!opts.filter(id)) {
                    return;
                }
                const inputDir = process.env.UNI_INPUT_DIR;
                const platform = process.env.UNI_PLATFORM;
                this.addWatchFile(path_1.default.resolve(inputDir, 'manifest.json'));
                (0, uni_cli_shared_1.getLocaleFiles)(path_1.default.resolve(inputDir, 'locale')).forEach((filepath) => {
                    this.addWatchFile(filepath);
                });
                if (options.project) {
                    const template = options.project.source;
                    if ((0, shared_1.hasOwn)(template, 'appid')) {
                        let projectname = path_1.default.basename(inputDir);
                        if (projectname === 'src') {
                            projectname = path_1.default.basename(path_1.default.dirname(inputDir));
                        }
                        template.projectname = projectname;
                        // TODO condition
                        if (process.env.UNI_AUTOMATOR_WS_ENDPOINT) {
                            if (!template.setting) {
                                template.setting = {};
                            }
                            template.setting.urlCheck = false;
                        }
                        projectJson = (0, uni_cli_shared_1.parseMiniProgramProjectJson)(code, platform, {
                            template,
                            pagesJson: (0, uni_cli_shared_1.parsePagesJsonOnce)(inputDir, platform),
                        });
                    }
                    else {
                        // 无需解析，直接拷贝，如 quickapp-webview
                        projectJson = template;
                    }
                }
                return {
                    code: '',
                    map: { mappings: '' },
                };
            },
            generateBundle() {
                if (projectJson && options.project) {
                    this.emitFile({
                        fileName: options.project.filename,
                        type: 'asset',
                        source: JSON.stringify(projectJson, null, 2),
                    });
                }
            },
        };
    });
}
exports.uniManifestJsonPlugin = uniManifestJsonPlugin;
