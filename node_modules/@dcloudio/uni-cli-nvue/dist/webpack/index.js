"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initWebpackNVueEntry = exports.runWebpackDev = exports.runWebpackBuild = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const webpack_1 = __importDefault(require("webpack"));
const loader_utils_1 = __importDefault(require("loader-utils"));
const uni_shared_1 = require("@dcloudio/uni-shared");
const uni_cli_shared_1 = require("@dcloudio/uni-cli-shared");
const config_1 = require("./config");
const alias_1 = require("./alias");
const utils_1 = require("./utils");
const initModuleAliasOnce = (0, uni_shared_1.once)(alias_1.initModuleAlias);
function runWebpack(mode, options) {
    initModuleAliasOnce();
    // 首次初始化 nvue 页面入口
    initPagesJsonNVueEntry();
    return new Promise((resolve, reject) => {
        const compiler = (0, webpack_1.default)((0, config_1.createConfig)(mode, options), (err, stats) => {
            if (err) {
                return reject(err.stack || err);
            }
            if (stats) {
                if (stats.hasErrors()) {
                    return reject((0, utils_1.formatErrors)(stats.compilation.errors));
                }
                if (stats.hasWarnings()) {
                    const info = stats.toJson({ all: false, warnings: true });
                    console.warn(info.warnings);
                }
                if (process.env.DEBUG) {
                    console.log(stats.toString({
                        all: false,
                        assets: true,
                        colors: true, // 在控制台展示颜色
                        // timings: true,
                    }));
                }
            }
            resolve(compiler);
        });
    });
}
function runWebpackBuild(options = {}) {
    return runWebpack('production', options);
}
exports.runWebpackBuild = runWebpackBuild;
function runWebpackDev(options = {}) {
    return runWebpack('development', options);
}
exports.runWebpackDev = runWebpackDev;
function initPagesJsonNVueEntry() {
    const pagesJson = (0, uni_cli_shared_1.parsePagesJsonOnce)(process.env.UNI_INPUT_DIR, 'app');
    initWebpackNVueEntry(pagesJson.pages);
}
function initWebpackNVueEntry(pages) {
    process.UNI_NVUE_ENTRY = {};
    pages.forEach(({ path, style: { isNVue, subNVues } }) => {
        if (isNVue) {
            process.UNI_NVUE_ENTRY[path] = genWebpackBase64Code(genNVueEntryCode(path));
        }
        if (!Array.isArray(subNVues)) {
            return;
        }
        subNVues.forEach(({ path }) => {
            if (!path) {
                return;
            }
            const subNVuePath = (0, uni_cli_shared_1.removeExt)((0, uni_cli_shared_1.normalizePath)(path.split('?')[0]));
            process.UNI_NVUE_ENTRY[subNVuePath] = genWebpackBase64Code(genNVueEntryCode(subNVuePath));
        });
    });
}
exports.initWebpackNVueEntry = initWebpackNVueEntry;
function genWebpackBase64Code(code) {
    return `data:text/javascript;base64,${Buffer.from(code).toString('base64')}`;
}
function genNVueEntryCode(route) {
    return `import '${genWebpackBase64Code(genNVueAppStyle())}'
import App from '${(0, uni_cli_shared_1.normalizePath)(path_1.default.resolve(process.env.UNI_INPUT_DIR, route))}.nvue?mpType=page'  
${uni_cli_shared_1.polyfillCode}
App.mpType = 'page'
App.route = '${route}'
App.el = '#root'
new Vue(App)
`;
}
function genNVueAppStyle() {
    if (process.env.UNI_NVUE_COMPILER !== 'uni-app') {
        return '';
    }
    const appVuePath = path_1.default.resolve(process.env.UNI_INPUT_DIR, 'App.vue');
    let code = 'Vue.prototype.__$appStyle__ = {}\n';
    let styles = [];
    try {
        if (fs_1.default.existsSync(appVuePath)) {
            const { parseComponent } = require('../../lib/weex-template-compiler');
            styles = parseComponent(fs_1.default.readFileSync(appVuePath, 'utf8')).styles;
        }
    }
    catch (e) { }
    const stringifyRequest = (r) => loader_utils_1.default.stringifyRequest({}, r);
    styles.forEach((style, index) => {
        if (!style.src) {
            style.src = (0, uni_cli_shared_1.normalizePath)(appVuePath);
        }
        code =
            code +
                `import __style${index} from ${genStyleRequest(style, index, stringifyRequest)}
Vue.prototype.__merge_style(__style${index},Vue.prototype.__$appStyle__)\n`;
    });
    return code;
}
function genStyleRequest(style, i, stringifyRequest) {
    const { attrsToQuery } = require('../../lib/vue-loader/lib/codegen/utils');
    const src = style.src;
    const attrsQuery = attrsToQuery(style.attrs, 'css');
    const query = `?vue&type=style&index=${i}${attrsQuery}`;
    return stringifyRequest(src + query);
}
