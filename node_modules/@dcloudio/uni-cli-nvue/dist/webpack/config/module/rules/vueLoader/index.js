"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVueLoader = void 0;
const shared_1 = require("@vue/shared");
const uni_cli_shared_1 = require("@dcloudio/uni-cli-shared");
const compilerOptions_1 = require("./compilerOptions");
const utils_1 = require("../../../../../utils");
const easycom_1 = require("./easycom");
const loader_1 = require("../../../../loader");
const preprocessLoader = {
    loader: (0, loader_1.resolveLoader)('preprocess'),
    options: {
        type: ['js', 'html'],
    },
};
function createVueLoader(options) {
    (0, uni_cli_shared_1.initEasycomsOnce)(process.env.UNI_INPUT_DIR, {
        dirs: [(0, uni_cli_shared_1.resolveComponentsLibPath)()],
        platform: process.env.UNI_PLATFORM,
    });
    return {
        test: [/\.nvue(\?[^?]+)?$/, /\.vue(\?[^?]+)?$/],
        use: [
            {
                loader: (0, utils_1.resolveLib)('vue-loader'),
                options: {
                    hotReload: false,
                    compiler: createCompiler(),
                    compilerOptions: (0, compilerOptions_1.createCompilerOptions)(options),
                },
            },
            preprocessLoader,
        ],
    };
}
exports.createVueLoader = createVueLoader;
const isUnaryTag = (0, shared_1.makeMap)('image,area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
    'link,meta,param,source,track,wbr');
function compileTemplate(source, options, compile) {
    const res = compile(source, options);
    res.components = (0, easycom_1.generateEasycomCode)([
        ...(options.isUnaryTag.autoComponents || []),
    ]);
    return res;
}
function createCompiler() {
    const compiler = require((0, utils_1.resolveLib)('weex-template-compiler'));
    const oldCompile = compiler.compile;
    compiler.compile = function (source, options = {}) {
        ;
        options.isUnaryTag = isUnaryTag;
        options.isUnaryTag.autoComponents = new Set();
        options.preserveWhitespace = false;
        return compileTemplate(source, options, oldCompile);
    };
    return compiler;
}
