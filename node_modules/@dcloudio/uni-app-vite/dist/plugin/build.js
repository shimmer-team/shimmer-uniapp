"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildOptions = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const uni_cli_shared_1 = require("@dcloudio/uni-cli-shared");
function buildOptions(userConfig, _) {
    var _a;
    const inputDir = process.env.UNI_INPUT_DIR;
    const outputDir = process.env.UNI_OUTPUT_DIR;
    // 开始编译时，清空输出目录
    if (fs_1.default.existsSync(outputDir)) {
        (0, uni_cli_shared_1.emptyDir)(outputDir);
    }
    return {
        // App 端目前仅提供 inline
        sourcemap: ((_a = userConfig.build) === null || _a === void 0 ? void 0 : _a.sourcemap) ? 'inline' : false,
        emptyOutDir: false,
        assetsInlineLimit: 0,
        rollupOptions: {
            input: (0, uni_cli_shared_1.resolveMainPathOnce)(inputDir),
            external: ['vue'],
            output: {
                name: 'AppService',
                format: process.env.UNI_APP_CODE_SPLITING ? 'amd' : 'iife',
                amd: {
                    autoId: true,
                },
                entryFileNames: uni_cli_shared_1.APP_SERVICE_FILENAME,
                sourcemapPathTransform(relativeSourcePath, sourcemapPath) {
                    const sourcePath = (0, uni_cli_shared_1.normalizePath)(path_1.default.relative(inputDir, path_1.default.resolve(path_1.default.dirname(sourcemapPath), relativeSourcePath)));
                    if (sourcePath.startsWith('..')) {
                        return '';
                    }
                    return 'uni-app:///' + sourcePath;
                },
                manualChunks: {},
                chunkFileNames(chunk) {
                    if (chunk.isDynamicEntry && chunk.facadeModuleId) {
                        const filepath = path_1.default.relative(inputDir, chunk.facadeModuleId);
                        return (0, uni_cli_shared_1.normalizePath)(filepath.replace(path_1.default.extname(filepath), '.js'));
                    }
                    return '[name].js';
                },
                assetFileNames: '[name][extname]',
                globals: {
                    vue: 'Vue',
                },
            },
        },
    };
}
exports.buildOptions = buildOptions;
